openapi: "3.1.0"
info:
  title: "agri_chain API"
  description: "agri_chain API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
paths:
  /login:
    post:
      summary: "POST login"
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonNode"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Token"
  /article/all:
    get:
      summary: "GET article/all"
      operationId: "getAllArticles"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /article/{id}:
    get:
      summary: "GET article/{id}"
      operationId: "getArticleById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /article/{id}/share:
    get:
      summary: "GET article/{id}/share"
      operationId: "shareArticle"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /customer/cart:
    get:
      summary: "GET customer/cart"
      operationId: "getCart"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Stock"
  /customer/cart/{id}/{quantity}:
    put:
      summary: "PUT customer/cart/{id}/{quantity}"
      operationId: "addToCart"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "quantity"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StockContent"
    delete:
      summary: "DELETE customer/cart/{id}/{quantity}"
      operationId: "removeFromCart"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "quantity"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StockContent"
  /customer/cart/checkout:
    post:
      summary: "POST customer/cart/checkout"
      operationId: "checkout"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
  /customer/order/{id}:
    delete:
      summary: "DELETE customer/order/{id}"
      operationId: "cancelOrder"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
  /customer/review:
    post:
      summary: "POST customer/review"
      operationId: "review"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Review"
  /customer/register:
    post:
      summary: "POST customer/register"
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /customer/logout:
    get:
      summary: "GET customer/logout"
      operationId: "logout"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /customer/report:
    post:
      summary: "POST customer/report"
      operationId: "reportProblem"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Problem"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /moderator/{id}/approve:
    put:
      summary: "PUT moderator/{id}/approve"
      operationId: "approveArticle"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /moderator/{id}/reject:
    put:
      summary: "PUT moderator/{id}/reject"
      operationId: "rejectArticle"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /moderator/all/approved:
    get:
      summary: "GET moderator/all/approved"
      operationId: "getAllApprovedArticles"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /moderator/all/rejected:
    get:
      summary: "GET moderator/all/rejected"
      operationId: "getAllRejectedArticles"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /moderator/all/pending:
    get:
      summary: "GET moderator/all/pending"
      operationId: "getAllPendingArticles"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /moderator/register:
    post:
      summary: "POST moderator/register"
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /moderator/logout:
    get:
      summary: "GET moderator/logout"
      operationId: "logout"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /moderator/report:
    post:
      summary: "POST moderator/report"
      operationId: "reportProblem"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Problem"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /customer-service/all:
    get:
      summary: "GET customer-service/all"
      operationId: "getAllProblems"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Problem"
  /customer-service/{problemId}:
    get:
      summary: "GET customer-service/{problemId}"
      operationId: "getProblemState"
      parameters:
        - name: "problemId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProblemState"
  /customer-service/{problemId}/{statusCode}:
    get:
      summary: "GET customer-service/{problemId}/{statusCode}"
      operationId: "getProblem"
      parameters:
        - name: "problemId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "statusCode"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "OPEN"
              - "CLOSED"
              - "SOLVED"
              - "REJECTED"
              - "UNRESOLVED"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /customer-service/{problemId}/solve:
    put:
      summary: "PUT customer-service/{problemId}/solve"
      operationId: "solveProblem"
      parameters:
        - name: "problemId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /customer-service/{problemId}/reject:
    put:
      summary: "PUT customer-service/{problemId}/reject"
      operationId: "rejectProblem"
      parameters:
        - name: "problemId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonNode"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /customer-service/{problemId}/close:
    put:
      summary: "PUT customer-service/{problemId}/close"
      operationId: "closeProblem"
      parameters:
        - name: "problemId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonNode"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /customer-service/register:
    post:
      summary: "POST customer-service/register"
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /customer-service/logout:
    get:
      summary: "GET customer-service/logout"
      operationId: "logout"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /customer-service/report:
    post:
      summary: "POST customer-service/report"
      operationId: "reportProblem"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Problem"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /admin/all:
    get:
      summary: "GET admin/all"
      operationId: "getAllUsers"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
  /admin/{id}/{status}:
    get:
      summary: "GET admin/{id}/{status}"
      operationId: "getUserById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "PENDING"
              - "ACTIVE"
              - "INACTIVE"
              - "BANNED"
              - "DELETED"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /admin/{id}:
    get:
      summary: "GET admin/{id}"
      operationId: "getUserById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /admin/{id}/state:
    get:
      summary: "GET admin/{id}/state"
      operationId: "getUserStatus"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserState"
  /admin/{id}/ban:
    put:
      summary: "PUT admin/{id}/ban"
      operationId: "banUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserState"
  /admin/{id}/unban:
    put:
      summary: "PUT admin/{id}/unban"
      operationId: "unbanUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserState"
  /admin/{id}/deactivate:
    put:
      summary: "PUT admin/{id}/deactivate"
      operationId: "deactivateUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserState"
  /admin/{id}/activate:
    put:
      summary: "PUT admin/{id}/activate"
      operationId: "activateUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserState"
  /admin/register:
    post:
      summary: "POST admin/register"
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /admin/logout:
    get:
      summary: "GET admin/logout"
      operationId: "logout"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /seller/distributor/article/all:
    get:
      summary: "GET seller/distributor/article/all"
      operationId: "getAllArticles"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /seller/distributor/article/all/{status}:
    get:
      summary: "GET seller/distributor/article/all/{status}"
      operationId: "getAllArticles"
      parameters:
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "DELETED"
              - "PUBLISHED"
              - "REJECTED"
              - "DRAFT"
              - "PENDING"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /seller/distributor/article/{articleId}/{status}:
    get:
      summary: "GET seller/distributor/article/{articleId}/{status}"
      operationId: "getArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "DELETED"
              - "PUBLISHED"
              - "REJECTED"
              - "DRAFT"
              - "PENDING"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/distributor/article:
    post:
      summary: "POST seller/distributor/article"
      operationId: "createArticle"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
    put:
      summary: "PUT seller/distributor/article"
      operationId: "updateArticle"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/distributor/article/{articleId}:
    delete:
      summary: "DELETE seller/distributor/article/{articleId}"
      operationId: "deleteArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/distributor/article/{articleId}/draft:
    put:
      summary: "PUT seller/distributor/article/{articleId}/draft"
      operationId: "draftArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/distributor/article/{articleId}/publish:
    put:
      summary: "PUT seller/distributor/article/{articleId}/publish"
      operationId: "publishArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/distributor/article/{articleId}/quantity/{quantity}:
    put:
      summary: "PUT seller/distributor/article/{articleId}/quantity/{quantity}"
      operationId: "updateArticleQuantity"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "quantity"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/distributor/article/{articleId}/quantity:
    get:
      summary: "GET seller/distributor/article/{articleId}/quantity"
      operationId: "getArticleQuantity"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int64"
  /seller/distributor/register:
    post:
      summary: "POST seller/distributor/register"
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /seller/distributor/logout:
    get:
      summary: "GET seller/distributor/logout"
      operationId: "logout"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /seller/distributor/report:
    post:
      summary: "POST seller/distributor/report"
      operationId: "reportProblem"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Problem"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /seller/event-planner/article/all:
    get:
      summary: "GET seller/event-planner/article/all"
      operationId: "getAllArticles"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /seller/event-planner/article/all/{status}:
    get:
      summary: "GET seller/event-planner/article/all/{status}"
      operationId: "getAllArticles"
      parameters:
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "DELETED"
              - "PUBLISHED"
              - "REJECTED"
              - "DRAFT"
              - "PENDING"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /seller/event-planner/article/{articleId}/{status}:
    get:
      summary: "GET seller/event-planner/article/{articleId}/{status}"
      operationId: "getArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "DELETED"
              - "PUBLISHED"
              - "REJECTED"
              - "DRAFT"
              - "PENDING"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/event-planner/article:
    post:
      summary: "POST seller/event-planner/article"
      operationId: "createArticle"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
    put:
      summary: "PUT seller/event-planner/article"
      operationId: "updateArticle"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/event-planner/article/{articleId}:
    delete:
      summary: "DELETE seller/event-planner/article/{articleId}"
      operationId: "deleteArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/event-planner/article/{articleId}/draft:
    put:
      summary: "PUT seller/event-planner/article/{articleId}/draft"
      operationId: "draftArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/event-planner/article/{articleId}/publish:
    put:
      summary: "PUT seller/event-planner/article/{articleId}/publish"
      operationId: "publishArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/event-planner/article/{articleId}/quantity/{quantity}:
    put:
      summary: "PUT seller/event-planner/article/{articleId}/quantity/{quantity}"
      operationId: "updateArticleQuantity"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "quantity"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/event-planner/article/{articleId}/quantity:
    get:
      summary: "GET seller/event-planner/article/{articleId}/quantity"
      operationId: "getArticleQuantity"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int64"
  /seller/event-planner/register:
    post:
      summary: "POST seller/event-planner/register"
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /seller/event-planner/logout:
    get:
      summary: "GET seller/event-planner/logout"
      operationId: "logout"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /seller/event-planner/report:
    post:
      summary: "POST seller/event-planner/report"
      operationId: "reportProblem"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Problem"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /seller/producer/article/all:
    get:
      summary: "GET seller/producer/article/all"
      operationId: "getAllArticles"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /seller/producer/article/all/{status}:
    get:
      summary: "GET seller/producer/article/all/{status}"
      operationId: "getAllArticles"
      parameters:
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "DELETED"
              - "PUBLISHED"
              - "REJECTED"
              - "DRAFT"
              - "PENDING"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /seller/producer/article/{articleId}/{status}:
    get:
      summary: "GET seller/producer/article/{articleId}/{status}"
      operationId: "getArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "DELETED"
              - "PUBLISHED"
              - "REJECTED"
              - "DRAFT"
              - "PENDING"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/producer/article:
    post:
      summary: "POST seller/producer/article"
      operationId: "createArticle"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
    put:
      summary: "PUT seller/producer/article"
      operationId: "updateArticle"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/producer/article/{articleId}:
    delete:
      summary: "DELETE seller/producer/article/{articleId}"
      operationId: "deleteArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/producer/article/{articleId}/draft:
    put:
      summary: "PUT seller/producer/article/{articleId}/draft"
      operationId: "draftArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/producer/article/{articleId}/publish:
    put:
      summary: "PUT seller/producer/article/{articleId}/publish"
      operationId: "publishArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/producer/article/{articleId}/quantity/{quantity}:
    put:
      summary: "PUT seller/producer/article/{articleId}/quantity/{quantity}"
      operationId: "updateArticleQuantity"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "quantity"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/producer/article/{articleId}/quantity:
    get:
      summary: "GET seller/producer/article/{articleId}/quantity"
      operationId: "getArticleQuantity"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int64"
  /seller/producer/register:
    post:
      summary: "POST seller/producer/register"
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /seller/producer/logout:
    get:
      summary: "GET seller/producer/logout"
      operationId: "logout"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /seller/producer/report:
    post:
      summary: "POST seller/producer/report"
      operationId: "reportProblem"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Problem"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
  /seller/transformer/article/all:
    get:
      summary: "GET seller/transformer/article/all"
      operationId: "getAllArticles"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /seller/transformer/article/all/{status}:
    get:
      summary: "GET seller/transformer/article/all/{status}"
      operationId: "getAllArticles"
      parameters:
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "DELETED"
              - "PUBLISHED"
              - "REJECTED"
              - "DRAFT"
              - "PENDING"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Article"
  /seller/transformer/article/{articleId}/{status}:
    get:
      summary: "GET seller/transformer/article/{articleId}/{status}"
      operationId: "getArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "DELETED"
              - "PUBLISHED"
              - "REJECTED"
              - "DRAFT"
              - "PENDING"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/transformer/article:
    post:
      summary: "POST seller/transformer/article"
      operationId: "createArticle"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
    put:
      summary: "PUT seller/transformer/article"
      operationId: "updateArticle"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/transformer/article/{articleId}:
    delete:
      summary: "DELETE seller/transformer/article/{articleId}"
      operationId: "deleteArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/transformer/article/{articleId}/draft:
    put:
      summary: "PUT seller/transformer/article/{articleId}/draft"
      operationId: "draftArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/transformer/article/{articleId}/publish:
    put:
      summary: "PUT seller/transformer/article/{articleId}/publish"
      operationId: "publishArticle"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleState"
  /seller/transformer/article/{articleId}/quantity/{quantity}:
    put:
      summary: "PUT seller/transformer/article/{articleId}/quantity/{quantity}"
      operationId: "updateArticleQuantity"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "quantity"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Article"
  /seller/transformer/article/{articleId}/quantity:
    get:
      summary: "GET seller/transformer/article/{articleId}/quantity"
      operationId: "getArticleQuantity"
      parameters:
        - name: "articleId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int64"
  /seller/transformer/register:
    post:
      summary: "POST seller/transformer/register"
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /seller/transformer/logout:
    get:
      summary: "GET seller/transformer/logout"
      operationId: "logout"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /seller/transformer/report:
    post:
      summary: "POST seller/transformer/report"
      operationId: "reportProblem"
      parameters:
        - name: "user"
          in: "query"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Problem"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
components:
  schemas:
    JsonNode:
      type: "object"
      properties: { }
    Timestamp:
      type: "object"
      properties:
        nanos:
          type: "integer"
          format: "int32"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        role:
          type: "string"
          enum:
            - "GUEST"
            - "CUSTOMER"
            - "PRODUCER"
            - "TRANSFORMER"
            - "DISTRIBUTOR"
            - "EVENT_PLANNER"
            - "MODERATOR"
            - "CUSTOMER_SERVICE"
            - "TIME"
            - "ADMIN"
        username:
          type: "string"
        password:
          type: "string"
        birthDate:
          $ref: "#/components/schemas/Timestamp"
    Token:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        issueTime:
          $ref: "#/components/schemas/Timestamp"
        user:
          $ref: "#/components/schemas/User"
        token:
          type: "string"
    Article:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        type:
          type: "string"
          enum:
            - "RAW_MATERIAL"
            - "PROCESSED_PRODUCT"
            - "PACKAGE"
            - "EVENT"
        name:
          type: "string"
        description:
          type: "string"
        price:
          type: "number"
          format: "double"
        seller:
          $ref: "#/components/schemas/User"
    StockContent:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        article:
          $ref: "#/components/schemas/Article"
        quantity:
          type: "integer"
          format: "int64"
    Stock:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        user:
          $ref: "#/components/schemas/User"
        articles:
          type: "array"
          items:
            $ref: "#/components/schemas/StockContent"
    CoordinateSequence:
      type: "object"
      properties: { }
    Envelope:
      type: "object"
      properties: { }
    PrecisionModel:
      type: "object"
      properties:
        scale:
          type: "number"
          format: "double"
    CoordinateSequenceFactory:
      type: "object"
      properties: { }
    GeometryFactory:
      type: "object"
      properties:
        precisionModel:
          $ref: "#/components/schemas/PrecisionModel"
        coordinateSequenceFactory:
          $ref: "#/components/schemas/CoordinateSequenceFactory"
        SRID:
          type: "integer"
          format: "int32"
    Object:
      type: "object"
      properties: { }
    Point:
      type: "object"
      properties:
        coordinates:
          $ref: "#/components/schemas/CoordinateSequence"
        envelope:
          $ref: "#/components/schemas/Envelope"
        factory:
          $ref: "#/components/schemas/GeometryFactory"
        SRID:
          type: "integer"
          format: "int32"
        userData:
          $ref: "#/components/schemas/Object"
    Address:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        point:
          $ref: "#/components/schemas/Point"
        notes:
          type: "string"
        street:
          type: "string"
        city:
          type: "string"
        zipCode:
          type: "string"
        country:
          type: "string"
    AbstractPaymentMethod:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        user:
          $ref: "#/components/schemas/User"
    Order:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        stock:
          $ref: "#/components/schemas/Stock"
        shippingAddress:
          $ref: "#/components/schemas/Address"
        billingAddress:
          $ref: "#/components/schemas/Address"
        payment:
          $ref: "#/components/schemas/AbstractPaymentMethod"
        trackingNumber:
          type: "string"
    Review:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        user:
          $ref: "#/components/schemas/User"
        article:
          $ref: "#/components/schemas/Article"
        rating:
          type: "string"
          enum:
            - "VERY_BAD"
            - "BAD"
            - "OK"
            - "GOOD"
            - "VERY_GOOD"
        title:
          type: "string"
        comment:
          type: "string"
    Problem:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        description:
          type: "string"
        user:
          $ref: "#/components/schemas/User"
    ProblemState:
      type: "object"
      properties:
        entity:
          $ref: "#/components/schemas/Problem"
        oldState:
          $ref: "#/components/schemas/ProblemState"
        id:
          type: "integer"
          format: "int64"
        statusCode:
          type: "string"
          enum:
            - "DELETED"
            - "ACTIVE"
            - "INACTIVE"
            - "PUBLISHED"
            - "REJECTED"
            - "DRAFT"
            - "PENDING"
            - "PROCESSING"
            - "SHIPPED"
            - "DELIVERED"
            - "CANCELLED"
            - "REFUNDED"
            - "COMPLETED"
            - "EVALUATING_REFUND"
            - "OPEN"
            - "CLOSED"
            - "SOLVED"
            - "UNRESOLVED"
            - "BANNED"
        initiator:
          $ref: "#/components/schemas/User"
        stateTime:
          $ref: "#/components/schemas/Timestamp"
        reason:
          type: "string"
    UserState:
      type: "object"
      properties:
        entity:
          $ref: "#/components/schemas/User"
        oldState:
          $ref: "#/components/schemas/UserState"
        id:
          type: "integer"
          format: "int64"
        statusCode:
          type: "string"
          enum:
            - "DELETED"
            - "ACTIVE"
            - "INACTIVE"
            - "PUBLISHED"
            - "REJECTED"
            - "DRAFT"
            - "PENDING"
            - "PROCESSING"
            - "SHIPPED"
            - "DELIVERED"
            - "CANCELLED"
            - "REFUNDED"
            - "COMPLETED"
            - "EVALUATING_REFUND"
            - "OPEN"
            - "CLOSED"
            - "SOLVED"
            - "UNRESOLVED"
            - "BANNED"
        initiator:
          $ref: "#/components/schemas/User"
        stateTime:
          $ref: "#/components/schemas/Timestamp"
        reason:
          type: "string"
    ArticleState:
      type: "object"
      properties:
        entity:
          $ref: "#/components/schemas/Article"
        oldState:
          $ref: "#/components/schemas/ArticleState"
        id:
          type: "integer"
          format: "int64"
        statusCode:
          type: "string"
          enum:
            - "DELETED"
            - "ACTIVE"
            - "INACTIVE"
            - "PUBLISHED"
            - "REJECTED"
            - "DRAFT"
            - "PENDING"
            - "PROCESSING"
            - "SHIPPED"
            - "DELIVERED"
            - "CANCELLED"
            - "REFUNDED"
            - "COMPLETED"
            - "EVALUATING_REFUND"
            - "OPEN"
            - "CLOSED"
            - "SOLVED"
            - "UNRESOLVED"
            - "BANNED"
        initiator:
          $ref: "#/components/schemas/User"
        stateTime:
          $ref: "#/components/schemas/Timestamp"
        reason:
          type: "string"